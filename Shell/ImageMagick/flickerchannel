#!/bin/bash
#
# Developed by Fred Weinhaus 1/20/2008 .......... revised 1/21/2008
#
# USAGE: flickerchannel [-c channellist] [-d delay] [ -r resize] [-m colormodel] [-i] [-l] [-f] infile
# USAGE: flickerchannel [-h or -help]
#
# OPTIONS:
#
# -c     channellist      doubled quoted list of channels; 0, 1, 2 (or 3);
#                         any two or three may be specified;
#                         default "0 1 2 3" for CMYK; otherwise "0 1 2"
# -d     delay            time delay per frame (ms); delay >= 0; default=50
# -r     resize           image resize percentage; resize > 0; 
#                         default=100 (unchanged)
# -m     colormodel       desired color space to convert (RGB) image;
#                         default is infile colorspace: RGB, CMYK or Gray
# -i                      includes the full color image in the animation
# -l                      disables the labeling of the images
# -f                      saves the animation to file animation.gif
#
###
#
# NAME: FLICKERCHANNEL
# 
# PURPOSE: To display and optionally save an animation of the channels in 
# an image.
# 
# DESCRIPTION: FLICKERCHANNEL automatically displays an animation from the
# channels of the supplied input image and optionally saves the animation 
# to a file. At least two channels must be supplied. The main purpose of the 
# script is to make a visual inspection of two (or more) channels of an image
# by alternating the display of each channel. If the image is RGB, then it may 
# optionally be converted to any other valid colorspace by the script before 
# the channels are labeled and displayed. The image can be any colorspace to 
# begin, but will be labeled as RGB, since IM does not keep track of the 
# colorspace of saved files.
# 
# 
# OPTIONS: 
# 
# 
# -c channellist ... CHANNELLIST is a double quoted list of the channels to 
# be included in the animation. For CMYK, this defaults to "0 1 2 3", but can 
# be any pair. For RGB or any other colorspace, this defaults to "0 1 2", but 
# can be any pair.
#
# -d delay ... DELAY is the time delay in msec between frames in the animation. 
# Values are integers greater than or equal to zero. The default=50. Note that 
# the animation will be created to loop forever.
# 
# -r resize ... RESIZE allows the animation to made larger or smaller than 
# the input image size. The values are integers greater than 0 representing the 
# resize percentage. The default=100 which leaves the animation the same size as 
# the input image.
# 
# -m  COLORMODEL is the desired color model in which to present the animation. 
# Any valid IM colorspace is permitted, but if used, the infile must be in RGB 
# colorspace. If a colormodel other than RGB is specified, then the RGB image is
# first transformed into that color space before separating the channels. 
# 
# -i ... Includes the full color infile in the animation.
# 
# -l ... Disables the labeling of the images.
# 
# -f ... Specifies that the animation is to be saved to a file called animation.gif
# 
# CAVEAT: No guarantee that this script will work on all platforms, 
# nor that trapping of inconsistent parameters is complete and 
# foolproof. Use At Your Own Risk. 
# 
######
#

# set default values
clist=""			# list of channels (-c)
delay=50    		# time delay for animation (-d)
resize=""   		# resize (-r)
colormodel=""		# colormodel desired (-m)
fullimage="no"		# include full color image (-i)
labelflag="yes" 	# labeling of the images (-l)
save="no"   		# save animation to file animation.gif (-f)

# set directory for temporary files
dir="."    # suggestions are dir="." or dir="/tmp"

# set up functions to report Usage and Usage with Description
PROGNAME=`type $0 | awk '{print $3}'`  # search for executable on path
PROGDIR=`dirname $PROGNAME`            # extract directory of program
PROGNAME=`basename $PROGNAME`          # base name of program
usage1() 
	{
	echo >&2 ""
	echo >&2 "$PROGNAME:" "$@"
	sed >&2 -n '/^###/q;  /^#/!q;  s/^#//;  s/^ //;  4,$p' "$PROGDIR/$PROGNAME"
	}
usage2() 
	{
	echo >&2 ""
	echo >&2 "$PROGNAME:" "$@"
	sed >&2 -n '/^######/q;  /^#/!q;  s/^#*//;  s/^ //;  4,$p' "$PROGDIR/$PROGNAME"
	}

# function to report error messages
errMsg()
	{
	echo ""
	echo $1
	echo ""
	usage1
	exit 1
	}

# function to test for minus at start of value of second part of option 1 or 2
checkMinus()
	{
	test=`echo "$1" | grep -c '^-.*$'`   # returns 1 if match; 0 otherwise
    [ $test -eq 1 ] && errMsg "$errorMsg"
	}

#function to create animation from specified channels
animateChannel()
	{
	if [ "$labelflag" = "no" ]
		then
		label=""
	else
		idn=`echo "$1" | sed -n 's/^.*flickerchannel_\([0-3]\)_.*$/\1/ p'`
		label="-label $infile--${modelspace}$idn"
	fi
	convert $label "$1" $resize miff:- |\
		montage - -geometry +0+0 -tile 1x1 $tmpC
	shift
	while [ $# -gt 0 ]
		do
		if [ "$labelflag" = "no" ]
			then
			label=""
		else
			idn=`echo "$1" | sed -n 's/^.*flickerchannel_\([0-3]\)_.*$/\1/ p'`
			label="-label $infile--${modelspace}$idn"
		fi
		convert $label "$1" $resize miff:- |\
	  		montage - -geometry +0+0 -tile 1x1 miff:- |\
			convert -delay $delay $tmpC -page +0+0 - -page +0+0 $tmpC
		shift
	done
	}

# test for correct number of arguments and get values
if [ $# -eq 0 ]
	then
	# help information
   echo ""
   usage2
   exit 0
elif [ $# -gt 12 ]
	then
	errMsg "--- TOO MANY ARGUMENTS WERE PROVIDED ---"
else
	while [ $# -gt 0 ]
		do
			# get parameter values
			case "$1" in
		  -h|-help)    # help information
					   echo ""
					   usage2
					   exit 0
					   ;;
				-c)    # list of channels
					   shift  # to get the next parameter
					   # test if parameter starts with minus sign 
					   errorMsg="--- INVALID CHANNEL LIST SPECIFICATION ---"
					   checkMinus "$1"
					   clist="$1"
					   clisttest=`expr "$clist" : '^[0-9 ][0-9 ]*$'`
		   			   [ $clisttest -eq 0 ] && errMsg "--- CHANNEL LIST=$clist MUST CONTAIN THE DIGITS 0, 1, 2 or 3 ---"
					   ;;
				-d)    # delay
					   shift  # to get the next parameter
					   # test if parameter starts with minus sign 
					   errorMsg="--- INVALID DELAY SPECIFICATION ---"
					   checkMinus "$1"
					   delay="$1"
					   delaytest=`expr "$delay" : '^[0-9][0-9]*$'`
		   			   delaytestA=`echo "$delay < 1" | bc`
		   			   [ $delaytest -eq 0 ] && errMsg "--- DELAY=$delay MUST BE AN INTEGER ---"
					   [ $delaytestA -eq 1 ] && errMsg "--- DELAY=$delay MUST BE GREATER THAN 0 ---"
					   ;;
				-r)    # resize
					   shift  # to get the next parameter
					   # test if parameter starts with minus sign 
					   errorMsg="--- INVALID RESIZE SPECIFICATION ---"
					   checkMinus "$1"
					   resize="$1"
					   resizetest=`expr "$resize" : '^[0-9][0-9]*$'`
		   			   resizetestA=`echo "$resize < 1" | bc`
		   			   [ $resizetest -eq 0 ] && errMsg "--- RESIZE=$resize MUST BE AN INTEGER ---"
					   [ $resizetestA -eq 1 ] && errMsg "--- RESIZE=$resize MUST BE GREATER THAN 0 ---"
					   resize="-resize $1%"
					   ;;
		 		-m)    # colormodel
					   shift  # to get the next parameter
					   # test if parameter starts with minus sign 
					   errorMsg="--- INCORRECT COLORMODEL PARAMETER SPECIFICATION ---"
					   checkMinus "$1"
					   colormodel=$1
					   ;;
				-i)    # include full color image
					   fullimage="yes"
					   ;;
				-l)    # labelflag
					   labelflag="no"
					   ;;
				-f)    # save to file
					   save="yes"
					   ;;
				 -)    # STDIN and end of arguments
					   break
					   ;;
				-*)    # any other - argument
					   errMsg "--- UNKNOWN OPTION ---"
					   ;;
				 *)    # end of arguments
					   break
					   ;;
			esac
			shift   # next option
	done
	# get infile and outfile
	infile=$1
fi

# test that infile provided
[ "$infile" = "" ] && errMsg "NO INPUT FILE SPECIFIED"

# setup temporary images and auto delete upon exit
tmpA="$dir/flickerchannel_$$.mpc"
tmpB="$dir/flickerchannel_$$.cache"
tmpC="$dir/flickerchannel_C_$$.miff"
tmp0="$dir/flickerchannel_0_$$.png"
tmp1="$dir/flickerchannel_1_$$.png"
tmp2="$dir/flickerchannel_2_$$.png"
tmp3="$dir/flickerchannel_3_$$.png"
trap "rm -f $tmpA $tmpB $tmpC $tmp0 $tmp1 $tmp2 $tmp3; exit 0" 0
trap "rm -f $tmpA $tmpB $tmpC $tmp0 $tmp1 $tmp2 $tmp3; exit 1" 1 2 3 15


if convert -quiet -regard-warnings "$infile" +repage "$tmpA"
	then
	# get colorspace
	data=`identify -verbose $tmpA`
	colorspace=`echo "$data" | sed -n 's/^.*Colorspace: \([^ ]*\).*$/\1/p'`
	if [ "$colormodel" = "CMYK" ]
		then
			modelspace="CMYK"
			convert $tmpA -colorspace CMYK -channel C -separate $tmp0
			convert $tmpA -colorspace CMYK -channel M -separate $tmp1
			convert $tmpA -colorspace CMYK -channel Y -separate $tmp2
			convert $tmpA -colorspace CMYK -channel K -separate $tmp3
			tmplist="$tmp0 $tmp1 $tmp2 $tmp3"
	elif [ "$colorspace" = "CMYK" -a "$colormodel" = "" ]
		then
			modelspace="CMYK"
			convert $tmpA -channel C -separate $tmp0
			convert $tmpA -channel M -separate $tmp1
			convert $tmpA -channel Y -separate $tmp2
			convert $tmpA -channel K -separate $tmp3
			tmplist="$tmp0 $tmp1 $tmp2 $tmp3"
	elif [ "$colorspace" = "RGB" -a "$colormodel" = "" ]
		then
			modelspace="RGB"
			convert $tmpA -channel R -separate $tmp0
			convert $tmpA -channel G -separate $tmp1
			convert $tmpA -channel B -separate $tmp2
			tmplist="$tmp0 $tmp1 $tmp2"
		else
			modelspace=$colormodel
			convert $tmpA -colorspace $colormodel -channel R -separate $tmp0
			convert $tmpA -colorspace $colormodel -channel G -separate $tmp1
			convert $tmpA -colorspace $colormodel -channel B -separate $tmp2
			tmplist="$tmp0 $tmp1 $tmp2"
	fi
else
	errMsg "--- FILE $infile DOES NOT EXIST OR IS NOT AN ORDINARY FILE, NOT READABLE OR HAS ZERO SIZE ---"
	usage
	exit 1
fi

# get list of channels and convert to array
[ "$clist" = "" ] && clist=$tmplist
cArr=($clist)
cnum=${#cArr[*]}
if [ "$modelspace" = "CMYK" -a $cnum -gt 4 ]
	then
	errMsg "--- TOO MANY CHANNELS SPECIFIED---"
elif [ "$modelspace" != "CMYK" -a $cnum -gt 3 ]
	then
	errMsg "--- TOO MANY CHANNELS SPECIFIED---"
fi
[ "$fullimage" = "yes" ] && cArr=(${cArr[*]} $tmpA)
cnum=${#cArr[*]}
if [ $cnum -lt 2 ]
	then
	errMsg "--- TOO FEW CHANNELS SPECIFIED ---"
fi
i=0
imglist=""
while [ $i -lt $cnum ]
	do
	id=${cArr[$i]}
	eval tmpid=\$tmp$id
	imglist="$imglist $tmpid"
	i=`expr $i + 1`
done

# do animation
animateChannel $imglist


# optional save animation to file
if [ "$save" = "yes" ]
	then
	convert $tmpC -loop 0 animation.gif
fi
	animate $tmpC
exit 0
